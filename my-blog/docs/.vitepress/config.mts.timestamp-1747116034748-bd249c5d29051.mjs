// docs/.vitepress/config.mts
import { defineConfig } from "file:///D:/blog/my-blog/node_modules/.pnpm/vitepress@1.6.3_@algolia+cl_0a4c8bfb128e07d2c0e0c57e7fc0e83a/node_modules/vitepress/dist/node/index.js";

// docs/.vitepress/blog-theme.ts
import { getThemeConfig } from "file:///D:/blog/my-blog/node_modules/.pnpm/@sugarat+theme@0.5.4_@eleme_8ac2d125377a79aaf1d9cc57373848d9/node_modules/@sugarat/theme/node.mjs";
var blogTheme = getThemeConfig({
  // ÂºÄÂêØRSSÊîØÊåÅ
  // RSS,
  // ÊêúÁ¥¢
  // ÈªòËÆ§ÂºÄÂêØpagefindÁ¶ªÁ∫øÁöÑÂÖ®ÊñáÊêúÁ¥¢ÊîØÊåÅÔºàÂ¶Ç‰ΩøÁî®ÂÖ∂ÂÆÉÁöÑÂèØ‰ª•ËÆæÁΩÆ‰∏∫falseÔºâ
  // search: false,
  // markdown ÂõæË°®ÊîØÊåÅÔºà‰ºöÂ¢ûÂä†‰∏ÄÂÆöÁöÑÊûÑÂª∫ËÄóÊó∂Ôºâ
  // mermaid: true
  // È°µËÑö
  footer: {
    // message Â≠óÊÆµÊîØÊåÅÈÖçÁΩÆ‰∏∫HTMLÂÜÖÂÆπÔºåÈÖçÁΩÆÂ§öÊù°ÂèØ‰ª•ÈÖçÁΩÆ‰∏∫Êï∞ÁªÑ
    // message: '‰∏ãÈù¢ ÁöÑÂÜÖÂÆπÂíåÂõæÊ†áÈÉΩÊòØÂèØ‰ª•‰øÆÊîπÁöÑÂô¢ÔºàÂΩìÁÑ∂Êú¨Êù°ÂÜÖÂÆπ‰πüÊòØÂèØ‰ª•ÈöêËóèÁöÑÔºâ',
    // copyright: 'MIT License | Á≤•ÈáåÊúâÂã∫Á≥ñ',
    icpRecord: {
      name: "\u7CA4ICP\u59072025379501\u53F7",
      link: "https://beian.miit.gov.cn/"
    }
    // securityRecord: {
    //   name: 'ÂÖ¨ÁΩëÂÆâÂ§áxxxxx',
    //   link: 'https://www.beian.gov.cn/portal/index.do'
    // },
  },
  // ‰∏ªÈ¢òËâ≤‰øÆÊîπ
  themeColor: "el-blue",
  // ÊñáÁ´†ÈªòËÆ§‰ΩúËÄÖ
  author: "linrunxinnn",
  // ÂèãÈìæ
  friend: [
    {
      nickname: "\u7CA5\u91CC\u6709\u52FA\u7CD6",
      des: "\u4F60\u7684\u6307\u5C16\u7528\u4E8E\u6539\u53D8\u4E16\u754C\u7684\u529B\u91CF",
      avatar: "https://img.cdn.sugarat.top/mdImg/MTY3NDk5NTE2NzAzMA==674995167030",
      url: "https://sugarat.top"
    },
    {
      nickname: "Vitepress",
      des: "Vite & Vue Powered Static Site Generator",
      avatar: "https://vitepress.dev/vitepress-logo-large.webp",
      url: "https://vitepress.dev/"
    }
  ]
  // ÂÖ¨Âëä
  // popover: {
  //   title: "ÂÖ¨Âëä",
  //   body: [
  //     { type: "text", content: "üëáÂÖ¨‰ºóÂè∑üëá---üëá ÂæÆ‰ø° üëá" },
  //     {
  //       type: "image",
  //       src: "https://img.cdn.sugarat.top/mdImg/MTYxNTAxODc2NTIxMA==615018765210~fmt.webp",
  //     },
  //     {
  //       type: "text",
  //       content: "Ê¨¢ËøéÂ§ßÂÆ∂Âä†Áæ§&ÁßÅ‰ø°‰∫§ÊµÅ",
  //     },
  //     {
  //       type: "text",
  //       content: "ÊñáÁ´†È¶ñ/ÊñáÂ∞æÊúâÁæ§‰∫åÁª¥Á†Å",
  //       style: "padding-top:0",
  //     },
  //     {
  //       type: "button",
  //       content: "‰ΩúËÄÖÂçöÂÆ¢",
  //       link: "https://sugarat.top",
  //     },
  //     {
  //       type: "button",
  //       content: "Âä†Áæ§‰∫§ÊµÅ",
  //       props: {
  //         type: "success",
  //       },
  //       link: "https://theme.sugarat.top/group.html",
  //     },
  //   ],
  //   duration: 0,
  // },
});

// docs/.vitepress/config.mts
var config_default = defineConfig({
  // ÁªßÊâøÂçöÂÆ¢‰∏ªÈ¢ò(@sugarat/theme)
  extends: blogTheme,
  // base,
  lang: "zh-cn",
  title: "linrunxinnn\u535A\u5BA2",
  lastUpdated: true,
  // ËØ¶ËßÅÔºöhttps://vitepress.dev/zh/reference/site-config#head
  head: [
    // ÈÖçÁΩÆÁΩëÁ´ôÁöÑÂõæÊ†áÔºàÊòæÁ§∫Âú®ÊµèËßàÂô®ÁöÑ tab ‰∏äÔºâ
    // ['link', { rel: 'icon', href: `${base}favicon.ico` }], // ‰øÆÊîπ‰∫Ü base ËøôÈáå‰πüÈúÄË¶ÅÂêåÊ≠•‰øÆÊîπ
    ["link", { rel: "icon", href: "/Home.ico" }]
  ],
  themeConfig: {
    // Â±ïÁ§∫ 2,3 Á∫ßÊ†áÈ¢òÂú®ÁõÆÂΩï‰∏≠
    outline: {
      level: [2, 3],
      label: "\u76EE\u5F55"
    },
    // ÈªòËÆ§ÊñáÊ°à‰øÆÊîπ
    returnToTopLabel: "\u56DE\u5230\u9876\u90E8",
    sidebarMenuLabel: "\u76F8\u5173\u6587\u7AE0",
    lastUpdatedText: "\u4E0A\u6B21\u66F4\u65B0\u4E8E",
    // ËÆæÁΩÆlogo
    logo: "/\u5B50\u8D85\u5144.jpg",
    // editLink: {
    //   pattern:
    //     'https://github.com/ATQQ/sugar-blog/tree/master/packages/blogpress/:path',
    //   text: 'Âéª GitHub ‰∏äÁºñËæëÂÜÖÂÆπ'
    // },
    nav: [
      { text: "\u9996\u9875", link: "/" },
      { text: "\u5173\u4E8E\u4F5C\u8005", link: "https://linrunxinnn.cn" }
    ],
    socialLinks: [
      {
        icon: "github",
        link: "https://github.com/linrunxinnn"
      }
    ]
  }
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
